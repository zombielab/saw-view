{"version":3,"sources":["../../src/finder/file-view-finder.js"],"names":["name","namespace","view","getNamespaceSegments","findInPaths","$hints","findNamedPathView","paths","stack","viewPaths","slice","viewFiles","getPossibleViewFiles","length","viewPath","shift","push","resolve","reject","stat","error","item","path","Error","$views","$paths","$extensions","segments","split","hint_path_delimiter","map","extension","FileViewFinder","constructor","extensions","find","indexOf","hints"],"mappings":"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","file":"file-view-finder.js","sourcesContent":["\"use strict\";\n\nimport fs from \"fs\";\nimport ViewFinder from \"./view-finder\";\n\nvar $views = {},\n    $hints = {},\n    $paths = [],\n    $extensions = [];\n\nasync function findNamedPathView(name) {\n    var [namespace, view] = getNamespaceSegments(name);\n\n    return await findInPaths(view, [$hints[namespace]]);\n}\n\nasync function findInPaths(name, paths) {\n    var stack = [],\n        viewPaths = paths.slice(),\n        viewFiles = getPossibleViewFiles(name);\n\n    while (viewPaths.length > 0) {\n        let viewPath = viewPaths.shift();\n\n        while (viewFiles.length > 0) {\n            let view = viewPath + \"/\" + viewFiles.shift();\n\n            stack.push(new Promise((resolve, reject) => {\n                fs.stat(view, (error) => {\n                    if (error) {\n                        reject(error);\n                    }\n\n                    resolve(view);\n                });\n            }));\n        }\n    }\n\n    for (var item of stack) {\n        try {\n            var path = await item;\n\n            return path;\n        } catch (error) {\n            continue;\n        }\n\n        return path;\n    }\n\n    throw new Error(`View [${name}] not found.`);\n}\n\nfunction getNamespaceSegments(name) {\n    var segments = name.split(ViewFinder.hint_path_delimiter);\n\n    if (segments.length != 2) {\n        throw new Error(`View [${name}] has an invalid name.`);\n    }\n\n    if (typeof $hints[segments[0]] === \"undefined\") {\n        throw new Error(`No hint path defined for [${segments[0]}].`);\n    }\n\n    return segments;\n}\n\nfunction getPossibleViewFiles(name) {\n    return $extensions.map((extension) => {\n        return name + \".\" + extension;\n    });\n}\n\nclass FileViewFinder extends ViewFinder {\n    constructor(paths = [], extensions = []) {\n        super();\n\n        $paths = paths;\n        $extensions = extensions;\n    }\n\n    async find(name) {\n        if (typeof $views[name] !== \"undefined\") {\n            return $views[name];\n        }\n\n        if (name.indexOf(ViewFinder.hint_path_delimiter) >= 0) {\n            return $views[name] = await findNamedPathView(name);\n        }\n\n        return $views[name] = await findInPaths(name, $paths);\n    }\n\n    get paths() {\n        return $paths;\n    }\n\n    get hints() {\n        return $hints;\n    }\n\n    get extensions() {\n        return $extensions;\n    }\n}\n\nexport default FileViewFinder;"]}