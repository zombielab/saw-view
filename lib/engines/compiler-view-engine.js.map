{"version":3,"sources":["../../src/engines/compiler-view-engine.js"],"names":["factory","compiled","data","sandbox","runInNewContext","displayErrors","evaluate","path","evaluated","$factory","error","message","evaluateCompiled","resolve","reject","readFile","compiledContent","$compiler","CompilerViewEngine","constructor","compiler","get","compiledPath","expired","isExpired","compile"],"mappings":"AAAA;;;;;;;;;;;;;;;+CAUA,WAAwBA,OAAxB,EAAiCC,QAAjC,EAA2CC,IAA3C,EAAiD;AAC7C,YAAIC,UAAUD,IAAd;AACAC,gBAAQ,UAAR,IAAsBH,OAAtB;AACAG,gBAAQ,QAAR;AACAA,gBAAQ,eAAR,IAA2BD,IAA3B;;AAEA,eAAO,MAAM,aAAGE,eAAH,CAAmBH,QAAnB,EAA6BE,OAA7B,EAAsC,EAACE,eAAe,IAAhB,EAAtC,CAAb;AACH,K;;oBAPcC,Q;;;;;;gDASf,WAAgCC,IAAhC,EAAsCN,QAAtC,EAAgDC,IAAhD,EAAsD;AAClD,YAAI;AACA,gBAAIM,YAAY,MAAMF,SAASG,QAAT,EAAmBR,QAAnB,EAA6BC,IAA7B,CAAtB;AACH,SAFD,CAEE,OAAOQ,KAAP,EAAc;AACZA,kBAAMC,OAAN,GAAiB,mBAAiBJ,IAAK,eAAYG,MAAMC,OAAQ,KAAjE;;AAEA,kBAAMD,KAAN;AACH;;AAED,eAAOF,SAAP;AACH,K;;oBAVcI,gB;;;;;;gDAYf,WAA+BL,IAA/B,EAAqC;AACjC,eAAO,MAAM,sBAAY,UAACM,OAAD,EAAUC,MAAV,EAAqB;AAC1C,yBAAGC,QAAH,CAAYR,IAAZ,EAAkB,OAAlB,EAA2B,UAACG,KAAD,EAAQT,QAAR,EAAqB;AAC5C,oBAAIS,KAAJ,EAAW;AACPI,2BAAOJ,KAAP;AACH;;AAEDG,wBAAQZ,QAAR;AACH,aAND;AAOH,SARY,CAAb;AASH,K;;oBAVce,e;;;;;AA7Bf;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,IAAIP,QAAJ,EACIQ,SADJ;;AAoCA,MAAMC,kBAAN,8BAA4C;AACxCC,gBAAYnB,OAAZ,EAAqBoB,QAArB,EAA+B;AAC3B;;AAEAX,mBAAWT,OAAX;AACAiB,oBAAYG,QAAZ;AACH;;AAEKC,OAAN,CAAUd,IAAV,EAAgBL,OAAO,EAAvB,EAA2B;AAAA;AACvB,gBAAIoB,eAAeL,UAAUhB,QAAV,CAAmBM,IAAnB,CAAnB;AACA,gBAAIgB,UAAU,MAAMN,UAAUO,SAAV,CAAoBjB,IAApB,CAApB;AACA,gBAAIN,WAAWsB,YAAY,IAAZ,GAAmB,MAAMN,UAAUQ,OAAV,CAAkBlB,IAAlB,CAAzB,GAAmD,MAAMS,gBAAgBM,YAAhB,CAAxE;;AAEA,mBAAO,MAAMV,iBAAiBU,YAAjB,EAA+BrB,QAA/B,EAAyCC,IAAzC,CAAb;AALuB;AAM1B;AAduC;;kBAiB7BgB,kB","file":"compiler-view-engine.js","sourcesContent":["\"use strict\";\n\nimport fs from \"fs\";\nimport vm from \"vm\";\nimport {async} from \"saw-support/lib/helpers\";\nimport ViewEngine from \"./view-engine\";\n\nvar $factory,\n    $compiler;\n\nasync function evaluate(factory, compiled, data) {\n    var sandbox = data;\n    sandbox[\"$factory\"] = factory;\n    sandbox[\"$async\"] = async;\n    sandbox[\"$defined_vars\"] = data;\n\n    return await vm.runInNewContext(compiled, sandbox, {displayErrors: true});\n}\n\nasync function evaluateCompiled(path, compiled, data) {\n    try {\n        var evaluated = await evaluate($factory, compiled, data);\n    } catch (error) {\n        error.message = `Compiled view [${path}] throws \"${error.message}\".`;\n\n        throw error;\n    }\n\n    return evaluated;\n}\n\nasync function compiledContent(path) {\n    return await new Promise((resolve, reject) => {\n        fs.readFile(path, \"utf-8\", (error, compiled) => {\n            if (error) {\n                reject(error);\n            }\n\n            resolve(compiled);\n        });\n    });\n}\n\nclass CompilerViewEngine extends ViewEngine {\n    constructor(factory, compiler) {\n        super();\n\n        $factory = factory;\n        $compiler = compiler;\n    }\n\n    async get(path, data = {}) {\n        var compiledPath = $compiler.compiled(path);\n        var expired = await $compiler.isExpired(path);\n        var compiled = expired === true ? await $compiler.compile(path) : await compiledContent(compiledPath);\n\n        return await evaluateCompiled(compiledPath, compiled, data);\n    }\n}\n\nexport default CompilerViewEngine;"]}