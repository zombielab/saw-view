{"version":3,"sources":["../src/factory.js"],"names":["$engine_resolver","$finder","$extensions","$sections","$shared","ViewFactory","exists","view","find","error","make","data","path","extension","substr","indexOf","TypeError","engine","resolve","render","$view","inject","section","content","replace","prepend","append","yield","defaultContent","flush","sectionContent","share","key","value","extensions","engine_resolver","resolver","Error","finder","sections","shared"],"mappings":"AAAA;;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,gBAAJ;AAAA,IACIC,OADJ;AAAA,IAEIC,cAAc,EAFlB;AAAA,IAGIC,YAAY,EAHhB;AAAA,IAIIC,UAAU,EAJd;;AAMA,MAAMC,WAAN,CAAkB;AACRC,UAAN,CAAaC,IAAb,EAAmB;AAAA;AACf,gBAAI;AACA,sBAAMN,QAAQO,IAAR,CAAaD,IAAb,CAAN;AACH,aAFD,CAEE,OAAOE,KAAP,EAAc;AACZ,uBAAO,KAAP;AACH;;AAED,mBAAO,IAAP;AAPe;AAQlB;;AAEKC,QAAN,CAAWH,IAAX,EAAiBI,OAAO,EAAxB,EAA4B;AAAA;;AAAA;AACxB,gBAAIC,OAAO,MAAMX,QAAQO,IAAR,CAAaD,IAAb,CAAjB;AACA,gBAAIM,YAAYD,KAAKE,MAAL,CAAYF,KAAKG,OAAL,CAAa,GAAb,IAAoB,CAAhC,CAAhB;;AAEA,gBAAI,OAAOb,YAAYW,SAAZ,CAAP,KAAkC,WAAtC,EAAmD;AAC/C,sBAAM,IAAIG,SAAJ,CAAe,oCAAkCJ,IAAK,KAAtD,CAAN;AACH;;AAED,gBAAIK,SAASjB,iBAAiBkB,OAAjB,CAAyBhB,YAAYW,SAAZ,CAAzB,CAAb;;AAEA,mBAAO,0BAAeI,MAAf,EAAuBV,IAAvB,EAA6BK,IAA7B,EAAmCD,IAAnC,CAAP;AAVwB;AAW3B;;AAEKQ,UAAN,CAAaZ,IAAb,EAAmBI,OAAO,EAA1B,EAA8B;AAAA;;AAAA;AAC1B,gBAAIS,QAAQ,MAAM,OAAKV,IAAL,CAAUH,IAAV,EAAgBI,IAAhB,CAAlB;;AAEA,mBAAO,MAAMS,MAAMD,MAAN,EAAb;AAH0B;AAI7B;;AAEDE,WAAOC,OAAP,EAAgBC,OAAhB,EAAyB;AACrB,YAAI,OAAOpB,UAAUmB,OAAV,CAAP,KAA8B,WAAlC,EAA+C;AAC3CC,sBAAUpB,UAAUmB,OAAV,EAAmBE,OAAnB,CAA2B,oBAA3B,EAAiDD,OAAjD,CAAV;AACH;;AAEDpB,kBAAUmB,OAAV,IAAqBC,OAArB;AACH;;AAEDE,YAAQH,OAAR,EAAiBC,OAAjB,EAA0B;AACtB,YAAI,OAAOpB,UAAUmB,OAAV,CAAP,KAA8B,WAAlC,EAA+C;AAC3CnB,sBAAUmB,OAAV,IAAqB,EAArB;AACH;;AAEDnB,kBAAUmB,OAAV,IAAqBC,UAAUpB,UAAUmB,OAAV,CAA/B;AACH;;AAEDI,WAAOJ,OAAP,EAAgBC,OAAhB,EAAyB;AACrB,YAAI,OAAOpB,UAAUmB,OAAV,CAAP,KAA8B,WAAlC,EAA+C;AAC3CnB,sBAAUmB,OAAV,IAAqB,EAArB;AACH;;AAEDnB,kBAAUmB,OAAV,IAAqBnB,UAAUmB,OAAV,IAAqBC,OAA1C;AACH;;AAEKI,SAAN,CAAYL,OAAZ,EAAqBM,iBAAiB,EAAtC,EAA0CC,QAAQ,IAAlD,EAAwD;AAAA;;AAAA;AACpD,gBAAIC,iBAAiBF,cAArB;;AAEA,gBAAI,OAAOzB,UAAUmB,OAAV,CAAP,KAA8B,WAAlC,EAA+C;AAC3CQ,iCAAiB3B,UAAUmB,OAAV,CAAjB;AACH;;AAEDQ,6BAAiBA,eAAeN,OAAf,CAAuB,oBAAvB,EAA6C,EAA7C,CAAjB;;AAEAM,6BAAiBA,eAAeN,OAAf,CAAuB,2BAAvB,EAAoD,oBAApD,CAAjB;;AAEA;;AAEA,gBAAIK,UAAU,IAAd,EAAoB;AAChB,uBAAKA,KAAL,CAAWP,OAAX;AACH;;AAED,mBAAOQ,cAAP;AAjBoD;AAkBvD;;AAEDD,UAAMP,OAAN,EAAe;AACX,YAAI,OAAOA,OAAP,KAAmB,WAAvB,EAAoC;AAChC,mBAAOnB,UAAUmB,OAAV,CAAP;AACH;;AAEDnB,oBAAY,EAAZ;AACH;;AAED4B,UAAMC,GAAN,EAAWC,KAAX,EAAkB;AACd7B,gBAAQ4B,GAAR,IAAeC,KAAf;AACH;;AAED,QAAIC,UAAJ,GAAiB;AACb,eAAOhC,WAAP;AACH;;AAED,QAAIiC,eAAJ,GAAsB;AAClB,eAAOnC,gBAAP;AACH;;AAED,QAAImC,eAAJ,CAAoBC,QAApB,EAA8B;AAC1B,YAAI,CAACA,QAAD,wCAAJ,EAAyC;AACrC,kBAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACH;;AAEDrC,2BAAmBoC,QAAnB;AACH;;AAED,QAAIE,MAAJ,GAAa;AACT,eAAOrC,OAAP;AACH;;AAED,QAAIqC,MAAJ,CAAWA,MAAX,EAAmB;AACf,YAAI,CAACA,MAAD,gCAAJ,EAAmC;AAC/B,kBAAM,IAAID,KAAJ,CAAU,0CAAV,CAAN;AACH;;AAEDpC,kBAAUqC,MAAV;AACH;;AAED,QAAIC,QAAJ,GAAe;AACX,eAAOpC,SAAP;AACH;;AAED,QAAIqC,MAAJ,GAAa;AACT,eAAOpC,OAAP;AACH;AAxHa;;kBA2HHC,W","file":"factory.js","sourcesContent":["\"use strict\";\n\nimport View from \"./view\";\nimport ViewFinder from \"./finder/view-finder\";\nimport EngineResolver from \"./engines/view-engine-resolver\";\n\nvar $engine_resolver,\n    $finder,\n    $extensions = {},\n    $sections = {},\n    $shared = {};\n\nclass ViewFactory {\n    async exists(view) {\n        try {\n            await $finder.find(view);\n        } catch (error) {\n            return false;\n        }\n\n        return true;\n    }\n\n    async make(view, data = {}) {\n        var path = await $finder.find(view);\n        var extension = path.substr(path.indexOf(\".\") + 1);\n\n        if (typeof $extensions[extension] === \"undefined\") {\n            throw new TypeError(`Unrecognized extension in file [${path}].`);\n        }\n\n        var engine = $engine_resolver.resolve($extensions[extension]);\n\n        return new View(this, engine, view, path, data);\n    }\n\n    async render(view, data = {}) {\n        var $view = await this.make(view, data);\n\n        return await $view.render();\n    }\n\n    inject(section, content) {\n        if (typeof $sections[section] !== \"undefined\") {\n            content = $sections[section].replace(\"((--- parent ---))\", content);\n        }\n\n        $sections[section] = content;\n    }\n\n    prepend(section, content) {\n        if (typeof $sections[section] === \"undefined\") {\n            $sections[section] = \"\";\n        }\n\n        $sections[section] = content + $sections[section];\n    }\n\n    append(section, content) {\n        if (typeof $sections[section] === \"undefined\") {\n            $sections[section] = \"\";\n        }\n\n        $sections[section] = $sections[section] + content;\n    }\n\n    async yield(section, defaultContent = \"\", flush = true) {\n        var sectionContent = defaultContent;\n\n        if (typeof $sections[section] !== \"undefined\") {\n            sectionContent = $sections[section];\n        }\n\n        sectionContent = sectionContent.replace(\"((--- parent ---))\", \"\");\n\n        sectionContent = sectionContent.replace(\"((--- parent-holder ---))\", \"((--- parent ---))\");\n\n        // TODO: event emit\n\n        if (flush === true) {\n            this.flush(section);\n        }\n\n        return sectionContent;\n    }\n\n    flush(section) {\n        if (typeof section !== \"undefined\") {\n            delete $sections[section];\n        }\n\n        $sections = {};\n    }\n\n    share(key, value) {\n        $shared[key] = value;\n    }\n\n    get extensions() {\n        return $extensions;\n    }\n\n    get engine_resolver() {\n        return $engine_resolver;\n    }\n\n    set engine_resolver(resolver) {\n        if (!resolver instanceof EngineResolver) {\n            throw new Error(\"Engine must be an instance of EngineResolver\");\n        }\n\n        $engine_resolver = resolver;\n    }\n\n    get finder() {\n        return $finder;\n    }\n\n    set finder(finder) {\n        if (!finder instanceof ViewFinder) {\n            throw new Error(\"Finder must be an instance of ViewFinder\");\n        }\n\n        $finder = finder;\n    }\n\n    get sections() {\n        return $sections;\n    }\n\n    get shared() {\n        return $shared;\n    }\n}\n\nexport default ViewFactory;"]}